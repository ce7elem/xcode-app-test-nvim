name: test
on:
  push:
    branches:
      - main
env:
  ASAN_OPTIONS: detect_leaks=1:check_initialization_order=1:log_path=${{ github.workspace }}/build/log/asan:intercept_tls_get_addr=0
  BIN_DIR: ${{ github.workspace }}/bin
  BUILD_DIR: ${{ github.workspace }}/build
  INSTALL_PREFIX: ${{ github.workspace }}/nvim-install
  LOG_DIR: ${{ github.workspace }}/build/log
  NVIM_LOG_FILE: ${{ github.workspace }}/build/.nvimlog
  TSAN_OPTIONS: log_path=${{ github.workspace }}/build/log/tsan
  VALGRIND_LOG: ${{ github.workspace }}/build/log/valgrind-%p.log
  # TEST_FILE: test/functional/core/startup_spec.lua
  # TEST_FILTER: foo bar
jobs:
  test:
    # runs-on: macos-15
    runs-on: self-hosted
    timeout-minutes: 45
    env:
      CC: clang
      NVIM_TEST_INTEG: '0'
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/actions/setup
        with:
          install_flags: "--test"
      - name: Create log dir
        run: mkdir -p "$LOG_DIR"
      - name: Set up interpreter packages
        run: |
          echo "Install neovim RubyGem."
          gem install --no-document --bindir "$BIN_DIR" --user-install --pre neovim

          sudo cpanm -n Neovim::Ext || cat "$HOME/.cpanm/build.log"
          perl -W -e 'use Neovim::Ext; print $Neovim::Ext::VERSION'
      - name: Build third-party deps
        run: |
          cmake -S cmake.deps --preset ci -D CMAKE_BUILD_TYPE=Debug -D CMAKE_FIND_FRAMEWORK=NEVER
          cmake --build .deps
      - name: Build
        run: |
          cmake --preset ci -D CMAKE_BUILD_TYPE=Debug -D CMAKE_INSTALL_PREFIX:PATH=$INSTALL_PREFIX -D CMAKE_FIND_FRAMEWORK=NEVER
          cmake --build build
      - name: unittest
        timeout-minutes: 20
        run: cmake --build build --target unittest
      - name: Install
        run: |
          cmake --install build
          "$INSTALL_PREFIX/bin/nvim" --version
          if ! "$INSTALL_PREFIX/bin/nvim" -u NONE -e -c ':help' -c ':qall'; then
            echo "Running ':help' in the installed nvim failed."
            echo "Maybe the helptags have not been generated properly."
            echo 'Failed running :help'
            exit 1
          fi

          # Check that all runtime files were installed
          for file in $(git -C runtime ls-files '*.vim' '*.ps' '*.dict' '*.py' '*.tutor' '*.awk' '*.sh' '*.bat'); do
            if ! test -e "$INSTALL_PREFIX/share/nvim/runtime/$file"; then
              printf "It appears that %s is not installed." "$file"
              exit 1
            fi
          done

          # Check that generated syntax file has function names, #5060.
          genvimsynf=syntax/vim/generated.vim
          gpat='syn keyword vimFuncName .*eval'
          if ! grep -q "$gpat" "$INSTALL_PREFIX/share/nvim/runtime/$genvimsynf"; then
            echo "It appears that $genvimsynf does not contain $gpat."
            exit 1
          fi
      - if: '!cancelled()'
        name: Show logs
        run: cat $(find "$LOG_DIR" -type f)
